---
- name: Debian OS
  block:

  # apt install gnupg2
  - name: Install gnupg2 Debian
    ansible.builtin.apt:
      name: 
        - gnupg2
        - lsb-release
        - python3-mysqldb
      state: latest
      update_cache: true

  # wget https://repo.percona.com/apt/percona-release_latest.generic_all.deb
  # dpkg -i ./percona-release_latest.generic_all.deb
  - name: Install a .deb package from the internet Debian
    ansible.builtin.apt:
      deb: https://repo.percona.com/apt/percona-release_latest.generic_all.deb
      update_cache: yes

  - name: Update cache
    ansible.builtin.apt: 
      update_cache: yes

  - name: percona-release setup ps80
    ansible.builtin.shell: percona-release setup ps80

  # apt install percona-server-server -y
  - name: Install percona-server-server Debian
    ansible.builtin.apt:
      name: 
        - percona-server-server
      state: latest
      update_cache: true

  - name: Set new root password
    ansible.builtin.shell: >
      mysql --connect-expired-password -e "ALTER USER '{{ mysql_root_user }}'@'localhost' IDENTIFIED WITH mysql_native_password BY '{{ mysql_root_password }}';"
    changed_when: false
    failed_when: false

  - name: Create .mycnf file for root user
    ansible.builtin.copy:
      dest: "{{ ansible_env.HOME }}/.my.cnf"
      mode: 0600
      content: |
        [client]
        user={{ mysql_root_user }}
        password={{ mysql_root_password }}
    notify: restart percona

#  - name: Update MySQL root password
#    community.mysql.mysql_user: 
#      name: "{{ mysql_root_user }}" 
#      host: "{{ item }}"
#      password: "{{ mysql_root_password }}"
#      login_user: "{{ mysql_root_user }}"
#      login_password: "{{ mysql_root_password }}"
#      check_implicit_admin: yes
#    with_items:
#      - "{{ ansible_hostname }}"
#      - 127.0.0.1
#      - localhost
#    ignore_errors: true

  when: ansible_os_family == "Debian"

- name: RedHat OS
  block:

  # rpm --import https://www.percona.com/downloads/RPM-GPG-KEY-percona
  - name: install percona key
    ansible.builtin.rpm_key:
      key: https://www.percona.com/downloads/RPM-GPG-KEY-percona
      state: present

  # wget https://repo.percona.com/yum/percona-release-latest.noarch.rpm
  # rpm -i percona-release-latest.noarch.rpm
  - name: Install percona repo
    ansible.builtin.package:
      name: 'https://repo.percona.com/yum/percona-release-latest.noarch.rpm'
      state: present
      update_cache: true

  - name: Update cache
    ansible.builtin.dnf: 
      update_cache: yes

  # percona-release setup pxc-80
  - name: percona-release setup pxc-80
    ansible.builtin.shell: echo 'y' | percona-release setup pxc-80

  # dnf install percona-xtradb-cluster -y
  - name: Install packages
    ansible.builtin.package:
      disable_gpg_check: true
      name: 
        - percona-xtradb-cluster
        - python3-PyMySQL
      state: latest

  # systemctl restart percona
  - name: Restart Percona service
    ansible.builtin.service:
      name: mysql
      state: restarted

  - name: Get temporary mysql root password
    ansible.builtin.shell: grep 'temporary password' /var/log/mysqld.log | awk '{print $NF}' | tail -n 1
    register: temp_mysql_root_password

#- ansible.builtin.debug: 
#    var: temp_mysql_root_password.stdout

  - ansible.builtin.debug: 
      msg: "{{ temp_mysql_root_password.stdout }}"

  - name: Create .my.cnf file for root user
    ansible.builtin.copy:
      dest: "{{ ansible_env.HOME }}/.my.cnf"
      mode: 0600
      content: |
        [client]
        user={{ mysql_root_user | quote }}
        password={{ temp_mysql_root_password.stdout | quote }}

  - name: Set new root password
    ansible.builtin.shell: mysql --connect-expired-password -e "ALTER USER '{{ mysql_root_user }}'@'localhost' IDENTIFIED WITH mysql_native_password BY '{{ mysql_root_password }}';"
    changed_when: false
    failed_when: false

  - name: Change root password in .my.cnf.
    ansible.builtin.lineinfile:
      path: "{{ ansible_env.HOME }}/.my.cnf"
      state: present
      regexp: '^.?password=*'
      line: "password={{ mysql_root_password | quote }}"

    # systemctl stop percona
  - name: Stop Percona service
    ansible.builtin.service:
      name: mysql
      state: stopped

  - name: Configure /etc/my.cnf.
    ansible.builtin.lineinfile:
      path: /etc/my.cnf
      state: present
      regexp: "{{ item.key }}"
      line: "{{ item.value }}"
    with_items: 
     - { key: '^wsrep_provider=', value: 'wsrep_provider=/usr/lib64/galera4/libgalera_smm.so' }
     - { key: '^wsrep_cluster_name=', value: 'wsrep_cluster_name=pxc-cluster' }
     - { key: '^wsrep_cluster_address=gcomm://', value: 'wsrep_cluster_address=gcomm://{{ ip_address["db-01"] }},{{ ip_address["db-02"] }},{{ ip_address["db-03"] }}' }
     - { key: '^wsrep_node_name=', value: 'wsrep_node_name={{ ansible_hostname }}' }
     - { key: 'wsrep_node_address=', value: 'wsrep_node_address={{ ansible_host }}' }

  - name: Template config file ssl.cnf to /etc/my.cnf.d/
    ansible.builtin.template:
      src: "percona/{{ item }}.j2"
      dest: "/etc/my.cnf.d/{{ item }}"
    with_items: 
     - ssl.cnf

  when: ansible_os_family == "RedHat"

- name: Copy mysql certificates from /var/lib/mysql to /tmp
  ansible.builtin.fetch:
    src: "/var/lib/mysql/{{ item }}"
    dest: /tmp/fetched
  with_items: 
   - server-key.pem
   - server-cert.pem
   - ca.pem
  when: "ansible_hostname in 'db-01'"

- name: Copy mysql certificates from /tmp to /var/lib/mysql
  ansible.builtin.copy:
    src: "/tmp/fetched/db-01/var/lib/mysql/{{ item }}"
    dest: "/var/lib/mysql/{{ item }}"
  with_items: 
   - server-key.pem
   - server-cert.pem
   - ca.pem
  when: "ansible_hostname not in 'db-01'"

# systemctl start mysql@bootstrap.service
- name: Start mysql@bootstrap service in first db-server
  ansible.builtin.service:
    name: mysql@bootstrap
    state: started
  when: "ansible_hostname in 'db-01'"

# systemctl start mysql.service
- name: Start mysql service in other db-servers
  ansible.builtin.service:
    name: mysql
    state: started
    enabled: true
  when: "ansible_hostname not in 'db-01'"

- name: Add database
  block:

  # systemctl stop mysql@bootstrap.service
  - name: Stop mysql@bootstrap service in first db-server
    ansible.builtin.service:
      name: mysql@bootstrap
      state: stopped

  # systemctl start mysql.service
  - name: Start mysql service in first db-server
    ansible.builtin.service:
      name: mysql
      state: started
      enabled: true

  # mysql -e "CREATE DATABASE cars;"
  - name: Create application database
    community.mysql.mysql_db: 
      name: "{{ db_name }}"
      state: "present"
      collation: "{{ db_collation }}"
      login_user: "{{ mysql_root_user }}"
      login_password: "{{ mysql_root_password }}"

  # cp percona/cars.sql /tmp/
  - name: Copy SQL dump file to the server
    ansible.builtin.copy:
      src: "percona/{{ db_dump_file }}"
      dest: /tmp
    when: db_dump_file != ""

  # mysql cars < /tmp/cars.sql
  - name: Dump file into the database
    community.mysql.mysql_db: 
      name: "{{ db_name }}"
      state: import
      target: "/tmp/{{ db_dump_file | basename }}"
      login_user: "{{ mysql_root_user }}"
      login_password: "{{ mysql_root_password }}"
    when: db_dump_file != ""

  # mysql -e "CREATE USER 'myuser'@'%' IDENTIFIED BY 'anotherreallylongP@ssw0rd';"
  # mysql -e "GRANT ALL PRIVILEGES ON *.* TO 'muuser'@'%';"
  # or
  # mysql -e "GRANT ALL PRIVILEGES ON cars.* TO 'myuser'@'%' IDENTIFIED BY 'anotherreallylongP@ssw0rd';"
  - name: Create Application user database
    community.mysql.mysql_user: 
      name: "{{ db_user }}"
      password: "{{ db_user_password }}"
      priv: "{{ db_name }}.*:ALL"
      host: "{{ db_host }}"
      state: present
      login_user: "{{ mysql_root_user }}"
      login_password: "{{ mysql_root_password }}"

  # mysql -e "CREATE USER 'phpadmin'@'%' IDENTIFIED BY 'phpadmin@Otus1234';"
  # mysql -e "GRANT SELECT,UPDATE,INSERT,DELETE ON cars.* TO 'phpadmin'@'%' REQUIRE SSL;"
  # or
  # mysql -e "GRANT SELECT,UPDATE,INSERT,DELETE ON cars.* TO 'phpadmin'@'%' IDENTIFIED BY 'anotherreallylongP@ssw0rd'; REQUIRE SSL"
  - name: Create Application user database for php site
    community.mysql.mysql_user:
      name: "{{ mysql_php_user }}"
      password: "{{ mysql_php_password }}"
      priv: "{{ db_name }}.*:ALL"
      #priv: "{{ db_name }}.*:ALL,GRANT,REQUIRESSL"
      #tls_requires:
      #  x509:
      host: "{{ db_host }}"
      state: present
      login_user: "{{ mysql_root_user }}"
      login_password: "{{ mysql_root_password }}"

  # CREATE USER 'proxysql'@'%' IDENTIFIED WITH mysql_native_password by 'proxysql@Otus1234';
  # GRANT USAGE ON *.* TO 'proxysql'@'%';
  # or
  # mysql -e "GRANT USAGE ON *.* TO 'proxysql'@'%' IDENTIFIED WITH mysql_native_password BY 'proxysql@Otus1234';"
  - name: Create Application user database for proxysql
    community.mysql.mysql_user: 
      name: "{{ proxysql_user }}"
      password: "{{ proxysql_password }}"
      priv: "*.*:USAGE"
      host: "{{ db_host }}"
      state: present
      login_user: "{{ mysql_root_user }}"
      login_password: "{{ mysql_root_password }}"

  # CREATE USER 'sbuser'@'192.168.70.74' IDENTIFIED BY 'sbpass';   # ip_address['proxysql-01']
  # GRANT ALL ON *.* TO 'sbuser'@'10.10.10.x';   # ip_address['proxysql-01']
  - name: Create Application user database for proxysql
    community.mysql.mysql_user: 
      name: "{{ sbuser }}"
      password: "{{ sbuser_password }}"
      priv: "*.*:ALL"
      host: "{{ ip_address['proxysql-01'] }}"
      state: present
      login_user: "{{ mysql_root_user }}"
      login_password: "{{ mysql_root_password }}"

  when: "ansible_hostname in 'db-01'"